// Requiring the module
crud = require("../crud");
const moment = require('moment');

excelImp = async (arquivo, inicio, table) => {
    const reader = require('xlsx')
    const validator = require('./validator')
    let fileXlsx = [];
    const arrays = [];
    inicio = 0;
    let retorno

    let file = reader.read(arquivo)
    var sheet;
    var objeto = {};

       // Trata arrays de participantes - Aereo, hotel, transporte
       let registroEncontrado = false
       registroEncontrado = file.SheetNames.find(elemento => elemento === 'aereo' || elemento === 'transporte'
       || elemento === 'hotel')
       ? true: registroEncontrado;
   
       if(registroEncontrado){
           for(i = 0; file.SheetNames.length > i; i++){
               sheet = reader.utils.sheet_to_json(file.Sheets[file.SheetNames[i]], { raw: false },  {range: inicio});
              
               // Converte datas
               if(file.SheetNames[i] === 'trechos'){
                    const data = sheet[0].dataEmissao
                    const dataM = moment(data, 'DD/MM/YYYY');
                    const dataF = dataM.format('YYYY-MM-DD');
                    sheet[0].data = dataF
               }

                // Converte datas
                if(file.SheetNames[i] === 'aereo'){
                    const dataEmissao = sheet[0].dataEmissao
                    const dataMEmisso = moment(dataEmissao, 'DD/MM/YYYY');
                    const dataFEmissao = dataMEmisso.format('YYYY-MM-DD');
                    sheet[0].dataEmissao = dataFEmissao

                    const dataRemissao = sheet[0].dataRemissao
                    const dataMRemissao = moment(dataRemissao, 'DD/MM/YYYY');
                    const dataFRemissao = dataMRemissao.format('YYYY-MM-DD');
                    sheet[0].dataRemissao = dataFRemissao
                }

               for(res of sheet){
                   arrays.push(res)                        
                   objeto[i] = arrays;
                   codigo = res.codigo_participante
                   delete res.codigo_participante
                   id = await crud('participantes', {"codigo": codigo}, "find");
                   if(fileXlsx[file.SheetNames[i]] === undefined)
                       fileXlsx[file.SheetNames[i]] = []
                   fileXlsx[file.SheetNames[i]] = [res]
                   fileXlsx._id = id[0]._id                   
               }
               if(fileXlsx.aereo)               
                   {
                   const trechos = fileXlsx.trechos.pop();  
                   delete fileXlsx.trechos
                   fileXlsx.aereo[0].trechos = trechos
               }    
           }    
           retorno = await crud('participantes', fileXlsx, "updateArrays");
         }
      else{

        // Trata as importações de tabelas
        // Le planilhas e guarda valores nas variaveis
        for(i = 0; file.SheetNames.length > i; i++){
            sheet = reader.utils.sheet_to_json(file.Sheets[file.SheetNames[i]], { raw: false },  {range: inicio});
            if(table == file.SheetNames[i]){
                for(res of sheet){
                    fileXlsx.push(res)
                }
            }else{
                for(res of sheet){
                    arrays.push(res)                
                    objeto[i] = arrays;
                }
            }
        }
        
        // Insere os campos array no Json
        if(Object.keys(arrays).length > 0){
            for(array of arrays){
                var indexof = fileXlsx.findIndex((elemento) => elemento.code == array.code)
                let newArray = []
                newArray.splice(0, 0, array)
                if(fileXlsx[indexof][Object.keys(objeto)] == undefined)
                    fileXlsx[indexof][Object.keys(objeto)] = newArray
                 else   
                    fileXlsx[indexof][Object.keys(objeto)].push(array)
                }
        }    
    
        // Insert
        retorno = await validator(table, fileXlsx);
    
        try {
            const result = await crud(table, retorno.arquivo, "insertMany");
        } catch (error) {
            retorno.registro = error;
        }
        
      }
 
    // Printing data
    console.log(fileXlsx)
    return retorno.registro;   
    
    
}
module.exports = excelImp;